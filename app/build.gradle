apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'findbugs'
apply plugin: 'pmd'

android {
    // See build.gradle in the root of the project
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'com.artemzin.qualitymatters'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName '1.0'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }

    sourceSets {
        // Common code for JVM tests lives in src/jvmTestsCommon
        test.java.srcDir 'src/jvmTestsCommon/java'

        // Unit tests live in src/unitTest.
        test.java.srcDir 'src/unitTests/java'

        // Integration tests live in src/integrationTest.
        test.java.srcDir 'src/integrationTests/java'
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true // Fail early

        disable 'GoogleAppIndexingWarning' // App does not have deep linking
        disable 'InvalidPackage' // Okio references java.nio that does not presented in Android SDK
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
    }
}

// Libraries declared in build.gradle in the root of the project
dependencies {
    compile libraries.dagger
    apt libraries.daggerCompiler
    compile libraries.javaxInject
    compile libraries.javaxAnnotationApi

    compile libraries.rxJava

    compile libraries.okHttp
    compile libraries.okHttpLoggingInterceptor
    compile libraries.retrofit
    compile libraries.retrofitJacksonConverter
    compile libraries.retrofitRxJavaAdapter
    compile libraries.jacksonDataBind

    compile libraries.autoValue

    compile libraries.supportAppCompat
    compile libraries.supportDesign
    compile libraries.supportRecyclerView
    compile libraries.supportCardView

    compile libraries.butterKnife
    compile libraries.picasso

    testCompile libraries.junit
    testCompile libraries.robolectric
    testCompile libraries.assertJ
    testCompile libraries.equalsVerifier
    testCompile libraries.okHttpMockWebServer
    testCompile libraries.mockitoCore
}

task findbugs(type: FindBugs, dependsOn: assemble) {
    ignoreFailures = false // Fail early
    effort = 'max'
    reportLevel = 'low' // Report even low priority problems

    classes = files("${project.projectDir}/build/intermediates/classes")
    source = fileTree('src/main/java')

    // If somebody has an idea how to make this work with support libraries -> open a PR please.
    classpath = files()

    excludeFilter = file("${project.projectDir}/static_analyzers/findbugs-filter.xml")
}

task pmd(type: Pmd, dependsOn: assemble) {
    ignoreFailures = false // Fail early
    ruleSets = ['java-basic', 'java-braces', 'java-strings', 'java-design', 'java-unusedcode']

    source = fileTree('src/main/java')
}